@Mock, @InjectMocks, @Spy, @Captor
Retrospective on software quality and Java testing

in terms of scenarios and implemented as "Given (initial context), when (event occurs), then (ensure some outcomes)"


buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M6'
	}
}

repositories {
	mavenCentral()
}

ext.junitJupiterVersion  = '5.0.0-M6'
ext.mockitoVersion  = '2.8.47'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.junit.platform.gradle.plugin'

jar {
	baseName = 'junit5-mockito'
	version = '1.0.0'
}

compileTestJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	options.compilerArgs += '-parameters'
}

dependencies {
	testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
	testCompile(""org.mockito:mockito-core:${mockitoVersion}")
	testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
}
